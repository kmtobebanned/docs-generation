"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[1065],{3905:(e,t,a)=>{a.d(t,{Zo:()=>p,kt:()=>h});var r=a(7294);function n(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,r)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){n(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,r,n=function(e,t){if(null==e)return{};var a,r,n={},o=Object.keys(e);for(r=0;r<o.length;r++)a=o[r],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)a=o[r],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var c=r.createContext({}),s=function(e){var t=r.useContext(c),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},p=function(e){var t=s(e.components);return r.createElement(c.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var a=e.components,n=e.mdxType,o=e.originalType,c=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=s(a),m=n,h=u["".concat(c,".").concat(m)]||u[m]||d[m]||o;return a?r.createElement(h,i(i({ref:t},p),{},{components:a})):r.createElement(h,i({ref:t},p))}));function h(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var o=a.length,i=new Array(o);i[0]=m;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l[u]="string"==typeof e?e:n,i[1]=l;for(var s=2;s<o;s++)i[s]=a[s];return r.createElement.apply(null,i)}return r.createElement.apply(null,a)}m.displayName="MDXCreateElement"},5622:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>l,toc:()=>s});var r=a(7462),n=(a(7294),a(3905));const o={sidebar_position:4},i="Code Snippet Example",l={unversionedId:"tutorial-basics/code-snippet-example",id:"tutorial-basics/code-snippet-example",title:"Code Snippet Example",description:"Lorem Ipsum is simply dummy text of the printing and typesetting industry.",source:"@site/docs/tutorial-basics/code-snippet-example.mdx",sourceDirName:"tutorial-basics",slug:"/tutorial-basics/code-snippet-example",permalink:"/docs/tutorial-basics/code-snippet-example",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/tutorial-basics/code-snippet-example.mdx",tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"tutorialSidebar",previous:{title:"Create a Blog Post",permalink:"/docs/tutorial-basics/create-a-blog-post"},next:{title:"Markdown Features",permalink:"/docs/tutorial-basics/markdown-features"}},c={},s=[{value:"ATPSCharacter::TurnAtRate",id:"atpscharacterturnatrate",level:3},{value:"ATPSCharacter::MoveForward",id:"atpscharactermoveforward",level:3},{value:"ATPSCharacter::MoveRight",id:"atpscharactermoveright",level:3},{value:"ATPSCharacter::BeginPlay",id:"atpscharacterbeginplay",level:3},{value:"ATPSCharacter::ToggleGamePause",id:"atpscharactertogglegamepause",level:3},{value:"ATPSCharacter::OnHealing",id:"atpscharacteronhealing",level:3}],p={toc:s};function u(e){let{components:t,...a}=e;return(0,n.kt)("wrapper",(0,r.Z)({},p,a,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"code-snippet-example"},"Code Snippet Example"),(0,n.kt)("p",null,"Lorem Ipsum is simply dummy text of the printing and typesetting industry."),(0,n.kt)("h3",{id:"atpscharacterturnatrate"},"[ATPSCharacter::TurnAtRate]"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-cpp",metastring:"{4} showLineNumbers","{4}":!0,showLineNumbers:!0},"void ATPSCharacter::TurnAtRate(float Rate) {\n  // calculate delta for this frame from the rate information\n  AddControllerYawInput(Rate * BaseTurnRate * GetWorld()->GetDeltaSeconds());\n}\n")),(0,n.kt)("h3",{id:"atpscharactermoveforward"},"[ATPSCharacter::MoveForward]"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-cpp",metastring:"showLineNumbers",showLineNumbers:!0},"void ATPSCharacter::MoveForward(float Value) {\n  if (Controller && Value != 0.0f) {\n    // find out which way is forward\n    const FRotator Rotation = Controller->GetControlRotation();\n    const FRotator YawRotation(0, Rotation.Yaw, 0);\n\n    // get forward vector\n    const FVector Direction =\n        FRotationMatrix(YawRotation).GetUnitAxis(EAxis::X);\n    AddMovementInput(Direction, Value);\n  }\n}\n")),(0,n.kt)("h3",{id:"atpscharactermoveright"},"[ATPSCharacter::MoveRight]"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-cpp",metastring:"showLineNumbers",showLineNumbers:!0},"void ATPSCharacter::MoveRight(float Value) {\n  if (Controller && Value != 0.0f) {\n    // find out which way is right\n    const FRotator Rotation = Controller->GetControlRotation();\n    const FRotator YawRotation(0, Rotation.Yaw, 0);\n\n    // get right vector\n    const FVector Direction =\n        FRotationMatrix(YawRotation).GetUnitAxis(EAxis::Y);\n    // add movement in that direction\n    AddMovementInput(Direction, Value);\n  }\n}\n")),(0,n.kt)("h3",{id:"atpscharacterbeginplay"},"[ATPSCharacter::BeginPlay]"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-cpp"},"void ATPSCharacter::BeginPlay() {\n  Super::BeginPlay();\n\n  check(HealthData.MaxHealth > 0.0f);\n  Health = HealthData.MaxHealth;\n\n  OnTakeAnyDamage.AddDynamic(this, &ATPSCharacter::OnAnyDamageReceived);\n}\n")),(0,n.kt)("h3",{id:"atpscharactertogglegamepause"},"[ATPSCharacter::ToggleGamePause]"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-cpp"},"void ATPSPlayerController::ToggleGamePause() {\n  bInPause = !bInPause;\n  SetPause(bInPause);\n  bShowMouseCursor = bInPause;\n  bInPause                                                                    //\n      ? SetInputMode(FInputModeGameAndUI().SetHideCursorDuringCapture(false)) //\n      : SetInputMode(FInputModeGameOnly());\n  OnGamePause.Broadcast(bInPause);\n}\n")),(0,n.kt)("h3",{id:"atpscharacteronhealing"},"[ATPSCharacter::OnHealing]"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-cpp"},"Health =\n    FMath::Clamp(Health + HealthData.HealModifier, 0.0f, HealthData.MaxHealth);\nif (FMath::IsNearlyEqual(Health, HealthData.MaxHealth)) {\n  Health = HealthData.MaxHealth;\n  GetWorldTimerManager().ClearTimer(HealTimerHandle);\n}\n")))}u.isMDXComponent=!0}}]);